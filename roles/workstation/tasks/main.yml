---
# After installation, Debian retains CDROM entries in APT. They should be removed.
- name: Remove cdrom entries in /apt/sources/list
  lineinfile:
    path: /etc/apt/sources.list
    state: absent
    regexp: '^deb cdrom'
  notify: [Update APT]
  become: true

# Flush handlers for previous task.
- meta: flush_handlers

# Make sure relevant system and desktop support packages are installed.
- name: Ensure system packages
  package: name='{{item}}' state=latest
  loop:
    - linux-image-5.8.0-0.bpo.2-amd64
    - linux-headers-5.8.0-0.bpo.2-amd64
    - linux-headers-5.8.0-0.bpo.2-common
    - firmware-linux
    - plymouth
    - plymouth-themes
    - gnome-core
    - gdm3
    - gnome-color-manager
    - gnome-tweaks
    - libcanberra-gtk-module
    - arc-theme
    - papirus-icon-theme
    - openssh-server
    - openssh-client
    - openvpn
    - file-roller
    - network-manager
    - network-manager-gnome
    - network-manager-openvpn
    - network-manager-openvpn-gnome
    - resolvconf
    - dnsmasq
    - dnsutils
    - debian-archive-keyring
    - curl
    - wget
    - gnupg
    - apt-transport-https
    - git
    - git-extras
    - whois
    - traceroute
    - htop
    - zip
    - unzip
    - p7zip
    - zsh
    - nftables
    - hexedit
    - debian-goodies
    - debsums
    - debsecan
    - libpam-tmpdir
    - apt-listbugs
  become: true

# Ensure relevant APT keys are present on the system to support extra repositories added later.
- name: Add apt keys
  apt_key:
    keyserver: keyserver.ubuntu.com
    id: '{{item}}'
  loop:
    - '9FD3B784BC1C6FC31A8A0A1C1655A0AB68576280' # NodeSource
    - '8FD3D9A8D3800305A9FFF259D1742AD60D811D58' # Spotify
    - 'DB085A08CA13B8ACB917E0F6D938EC0D038651BD' # Slack
    - '8ED17AF5D7E675EB3EE3BCE98AC3B29174885C03' # AdoptOpenJDK
    - '9DC858229FC7DD38854AE2D88D81803C0EBFCD88' # Docker
    - '8756C4F765C9AC3CB6B85D62379CE192D401AB61' # Insomnia
    - '72ECF46A56B4AD39C907BBB71646B01B86E50310' # Yarn
    - '4CCA1EAF950CEE4AB83976DCA040830F7FAC5991' # Google-1
    - 'EB4C1BFD4F042F6DDDCCEC917721F63BD38B4796' # Google-2
    - '15058500A0235D97F5D10063B188E2B695BD4743' # deb.sury.org
    - '0A0FAB860D48560332EFB581B75442BBDE9E3B09' # Atom
    - '54A647F9048D5688D7DA2ABE6A030B21BA07F4FB' # Google Cloud SDK
    - 'C80E383C3DE9F082E01391A0366C67DE91CA5D5F' # Lynis
    - 'DBA36B5181D0C816F630E889D980A17457F6FB06' # Signal
    - 'AEE35447B5D3E4A69860622702F762CA6730E6A7' # libkafe
    - 'E162F504A20CDF15827F718D4B7C549A058F8B6B' # MongoDB v4.2 rel
    - 'B9F8D658297AF3EFC18D5CDFA2F683C52980AECF' # Virtualbox
  become: true

# Enable extra repositories needed on the system. Mostly development, productivity etc.
- name: Enable extra repos
  apt_repository: filename='{{item.file}}' repo='{{item.repo}}' state=present
  loop:
    - {file: 'nodejs', repo: 'deb https://deb.nodesource.com/node_12.x {{ansible_distribution_release}} main'}
    - {file: 'adoptopenjdk', repo: 'deb https://adoptopenjdk.jfrog.io/adoptopenjdk/deb/ {{ansible_distribution_release}} main'}
    - {file: 'spotify', repo: 'deb http://repository.spotify.com stable non-free'} # HTTP :(
    - {file: 'slack', repo: 'deb https://packagecloud.io/slacktechnologies/slack/debian/ jessie main'}
    - {file: 'docker', repo: 'deb [arch=amd64] https://download.docker.com/linux/debian {{ansible_distribution_release}} stable'}
    - {file: 'insomnia', repo: 'deb https://dl.bintray.com/getinsomnia/Insomnia /'}
    - {file: 'yarn', repo: 'deb https://dl.yarnpkg.com/debian/ stable main'}
    - {file: 'google-chrome', repo: 'deb [arch=amd64] https://dl.google.com/linux/chrome/deb/ stable main'}
    - {file: 'php-sury-org', repo: 'deb https://packages.sury.org/php/ {{ansible_distribution_release}} main'}
    - {file: 'atom-editor', repo: 'deb [arch=amd64] https://packagecloud.io/AtomEditor/atom/any/ any main'}
    - {file: 'lynis', repo: 'deb https://packages.cisofy.com/community/lynis/deb/ stable main'}
    - {file: 'google-cloud-sdk', repo: 'deb https://packages.cloud.google.com/apt cloud-sdk main'}
    - {file: 'signal', repo: 'deb [arch=amd64] https://updates.signal.org/desktop/apt xenial main'}
    - {file: 'libkafe', repo: 'deb https://dl.cloudsmith.io/public/kafe/libkafe/deb/debian {{ansible_distribution_release}} main'}
    - {file: 'mongodb-4.2', repo: 'deb http://repo.mongodb.org/apt/debian {{ansible_distribution_release}}/mongodb-org/4.2 main'}
    - {file: 'virtualbox', repo: 'deb [arch=amd64] https://download.virtualbox.org/virtualbox/debian {{ansible_distribution_release}} contrib'}
  become: true

- name: Ensure my packages
  package: name='{{item}}' state=latest
  loop:
    - cups
    - lynis
    - make
    - cmake
    - clang-7
    - clang-8
    - openvpn
    - meld
    - docker-ce
    - adoptopenjdk-8-openj9
    - adoptopenjdk-8-openj9-jre
    - adoptopenjdk-11-openj9
    - adoptopenjdk-11-openj9-jre
    - python3
    - python3-pip
    - nodejs
    - yarn
    - php7.4-cli
    - php7.4-mbstring
    - php7.4-mysql
    - php7.4-curl
    - php7.4-iconv
    - php7.4-intl
    - php7.4-json
    - php7.4-pdo
    - php7.4-xml
    - composer
    - tmux
    - tmuxinator
    - filezilla
    - vlc
    - gimp
    - spotify-client
    - slack-desktop
    - telegram-desktop
    - signal-desktop
    - google-chrome-stable
    - insomnia
    - atom
    - fzf
    - memcached
    - google-cloud-sdk
    - virt-manager
    - kafe-cli
    - mongodb-org-shell
    - mongodb-org-tools
    - linux-perf-5.6
    - valgrind
    - sshpass
    - zenmap
    - liblua5.3-dev
    - libcurl4-gnutls-dev
    - libarchive-dev
    - libssh-dev
    - libgit2-dev
    - inkscape
    - vinagre
    - libguestfs-tools
    - cloud-utils
    - wrk
    - virtualbox-6.1
  become: true

- name: Ensure system files
  copy: src='{{item.src}}'  dest='{{item.dest}}' mode='0644' owner='root' group='root'
  loop:
    - {src: menu-icon.svg, dest: /etc/menu-icon.svg} # Used by Arc Menu GNOME extension.
    - {src: wallpaper.png, dest: /etc/wallpaper.png} # System default wallpaper
    - {src: issue, dest: /etc/issue} # System banner
    - {src: issue.net, dest: /etc/issue.net} # System banner - for network clients
    - {src: motd, dest: /etc/motd} # User motd
  become: true

# Ensure DCONF profile is present on the system. This deals with desktop customization and defaults.
- name: Create /etc/dconf/profile
  file: path='/etc/dconf/profile' state=directory mode='0755' owner=root group=root
  become: true

- name: Copy dconf user profile config
  copy: src=dconf_profile_user dest=/etc/dconf/profile/user mode='0644' owner=root group=root
  become: true

- name: Create /etc/dconf/db/local.d
  file: path='/etc/dconf/db/local.d' state=directory mode='0755' owner=root group=root
  become: true

- name: Update dconf settings
  copy: src=dconf_settings.ini dest=/etc/dconf/db/local.d/00-global mode='0644' owner=root group=root
  notify: [Update dconf]
  become: true
# END

# Configure network manager
- name: Copy NetworkManager.conf
  copy: src=NetworkManager.conf dest=/etc/NetworkManager/NetworkManager.conf mode='0644' owner=root group=root
  notify: [Restart NetworkManager]
  become: true

# Configure SSH server
- name: Copy sshd_config
  copy: src=sshd_config dest=/etc/ssh/sshd_config mode='0644' owner=root group=root
  notify: [Restart sshd]
  become: true

# Configure local caching DNS
- name: Copy dnsmasq config
  copy: src=dnsmasq.conf dest=/etc/dnsmasq.d/local.conf mode='0644' owner=root group=root
  notify: [Restart dnsmasq]
  become: true

# Ensure network interfaces are scanned in certain order for resolvconf
- name: Copy interface-order
  copy: src=interface-order dest=/etc/resolvconf/interface-order mode='0644' owner=root group=root
  notify: [Update resolvconf]
  become: true

# Configure default system UMASK (https://wiki.debian.org/Permissions)
- name: Ensure default umask
  lineinfile:
    path: /etc/pam.d/common-session
    line: 'session optional pam_umask.so umask=022'
  become: true

# Configure boot screen
- name: Copy plymouthd.conf
  copy: src=plymouthd.conf dest=/etc/plymouth/plymouthd.conf mode='0644' owner=root group=root
  notify: [Update initramfs]
  become: true

- name: Install oh-my-zsh for root
  git: repo='https://github.com/ohmyzsh/ohmyzsh' dest=/root/.oh-my-zsh
  become: true

- name: Install oh-my-zsh for self
  git: repo='https://github.com/ohmyzsh/ohmyzsh' dest='/home/{{host_username}}/.oh-my-zsh'

- name: Install fonts
  copy: src=fonts/ dest=/usr/local/share/fonts
  become: true

# Configure firewall
- name: Install nftables.conf
  copy: src=nftables.conf dest=/etc/nftables.conf
  notify: [Reload nftables]
  become: true

- name: Ensure group "docker" exists
  group:
    name: docker
    state: present
  become: true

# Ensure own user settings
- name: Update own user
  user:
    name: '{{host_username}}'
    shell: /bin/zsh
    groups: docker
    append: yes
    create_home: yes
    password: '*' # Initial password is none, account locked
    update_password: on_create # Do not reset password from ansible
  become: true

- name: Update root
  user:
    name: root
    shell: /bin/zsh
  become: true

- name: Ensure home directory has correct permissions
  file: path='/home/{{host_username}}/' state=directory mode='0700' owner='{{host_username}}' group='{{host_username}}'
  become: true

- name: Create ~/.ssh/
  file: path='/home/{{host_username}}/.ssh' state=directory mode='0700' owner='{{host_username}}' group='{{host_username}}'
  become: true

- name: Create ~/.atom/
  file: path='/home/{{host_username}}/.atom' state=directory mode='0700' owner='{{host_username}}' group='{{host_username}}'
  become: true

- name: Ensure personal dot files
  copy: src='{{item.src}}'  dest='{{item.dest}}' mode='0600' owner='{{host_username}}' group='{{host_username}}'
  loop:
    - {src: dots/zshrc.zsh, dest: '/home/{{host_username}}/.zshrc'}
    - {src: dots/tmux.conf, dest: '/home/{{host_username}}/.tmux.conf'}
    - {src: dots/editorconfig, dest: '/home/{{host_username}}/.editorconfig'}
    - {src: dots/wgetrc, dest: '/home/{{host_username}}/.wgetrc'}
    - {src: dots/gitignore, dest: '/home/{{host_username}}/.gitignore'}
    - {src: dots/curlrc, dest: '/home/{{host_username}}/.curlrc'}
    - {src: dots/.atom/config.cson, dest: '/home/{{host_username}}/.atom/config.cson'}
    - {src: dots/.atom/styles.less, dest: '/home/{{host_username}}/.atom/styles.less'}

- name: Ensure root dot files
  copy: src='{{item.src}}' dest='{{item.dest}}' mode='0600' owner='root' group='root'
  loop:
    - {src: dots/zshrc.zsh, dest: '/root/.zshrc'}
    - {src: dots/editorconfig, dest: '/root/.editorconfig'}
    - {src: dots/wgetrc, dest: '/root/.wgetrc'}
    - {src: dots/curlrc, dest: '/root/.curlrc'}
  become: true

- name: Ensure personal files (from templates)
  template: src='{{item.src}}'  dest='{{item.dest}}' mode='0600' owner='{{host_username}}' group='{{host_username}}'
  loop:
    - {src: dots/gitconfig, dest: '/home/{{host_username}}/.gitconfig'}
    - {src: dots/authorized_keys, dest: '/home/{{host_username}}/.ssh/authorized_keys'}

- name: Ensure default directories in home
  file: path='{{item}}' state=directory mode='0700' owner='{{host_username}}' group='{{host_username}}'
  loop:
    - '/home/{{host_username}}/dots'
    - '/home/{{host_username}}/CLionProjects'
    - '/home/{{host_username}}/IdeaProjects'
  become: true

# Configure icons in Nautilus for some directories.
- name: Set home folder icons
  shell: 'gio set -t string {{item.dir}} metadata::custom-icon file://{{item.icon}}'
  changed_when: false # Really not that important...
  loop:
    - {dir: '/home/{{host_username}}/CLionProjects', icon: '/usr/share/icons/Papirus/64x64/places/folder-cyan-development.svg'}
    - {dir: '/home/{{host_username}}/IdeaProjects', icon: '/usr/share/icons/Papirus/64x64/places/folder-pink-development.svg'}
    - {dir: '/home/{{host_username}}/dots', icon: '/usr/share/icons/Papirus/64x64/places/folder-orange-development.svg'}

# Install python extra packages and ensure they are up to date.
- name: Ensure pip3 packages
  pip: name='{{item}}' executable=pip3 state=latest
  loop:
    - ansible # Yo dawg i herd you like Ansible so we put a Ansible in yo Ansible so you can automate while u automate
    - backupcpy
    - pipenv
    - Django
    - docker-compose
    - awscli
    - notebook
    - cloudsmith-cli
  become: true

- name: Ensure fetchfox
  pip: name='fetchfox' executable=pip3 state=present
  notify: [Install fetchfox stable]
  become: true

# Make sure system services we explicitly need are running and enabled.
- name: Enable services
  service: name='{{item}}' state=started enabled=yes
  loop:
    - gdm
    - memcached
    - sshd
    - dnsmasq
    - resolvconf
    - nftables
  become: yes

# Disable services we do not need.
- name: Disable services
  service: name='{{item}}' state=stopped enabled=no
  loop:
    - systemd-networkd
    - systemd-resolved
  become: yes

- name: Install Node global packages (yarn)
  yarn: name='{{item}}' global=yes state=latest production=yes
  loop:
    - '@vue/cli'
    - '@angular/cli'
    - 'nativescript'
    - '@bitwarden/cli'
    - 'svgo'
    - 'docusaurus-init'
  changed_when: false # ignore
  become: true

- name: Install composer globally
  script:
    cmd: scripts/composer-setup.sh
    chdir: /tmp
  changed_when: false # ignore
  become: true

- name: Install Symfony CLI globally
  script:
    cmd: scripts/symfony-setup.sh --install-dir=/usr/local/bin/
    chdir: /tmp
  changed_when: false # ignore
  become: true
